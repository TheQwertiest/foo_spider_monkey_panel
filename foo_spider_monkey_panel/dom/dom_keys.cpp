#include <stdafx.h>

#include "dom_keys.h"

#include <qwr/algorithm.h>

#include <unordered_map>

namespace
{

const std::unordered_map<uint32_t, std::wstring> kVirtualCodeToValue{
    { VK_ACCEPT, L"Accept" },
    { VK_APPS, L"ContextMenu" },
    { VK_BACK, L"Backspace" },
    { VK_BROWSER_BACK, L"BrowserBack" },
    { VK_BROWSER_FAVORITES, L"BrowserFavorites" },
    { VK_BROWSER_FORWARD, L"BrowserForward" },
    { VK_BROWSER_HOME, L"BrowserHome" },
    { VK_BROWSER_REFRESH, L"BrowserRefresh" },
    { VK_BROWSER_SEARCH, L"BrowserSearch" },
    { VK_BROWSER_STOP, L"BrowserStop" },
    { VK_CANCEL, L"Cancel" },
    { VK_CAPITAL, L"CapsLock" },
    { VK_CLEAR, L"Clear" },
    { VK_CONTROL, L"Control" },
    { VK_CONVERT, L"Convert" },
    { VK_CRSEL, L"CrSel" },
    { VK_DELETE, L"Delete" },
    { VK_DOWN, L"ArrowDown" },
    { VK_END, L"End" },
    { VK_EREOF, L"EraseEof" },
    { VK_ESCAPE, L"Escape" },
    { VK_EXECUTE, L"Execute" },
    { VK_EXSEL, L"ExSel" },
    { VK_F1, L"F1" },
    { VK_F2, L"F2" },
    { VK_F3, L"F3" },
    { VK_F4, L"F4" },
    { VK_F5, L"F5" },
    { VK_F6, L"F6" },
    { VK_F7, L"F7" },
    { VK_F8, L"F8" },
    { VK_F9, L"F9" },
    { VK_F10, L"F10" },
    { VK_F11, L"F11" },
    { VK_F12, L"F12" },
    { VK_F13, L"F13" },
    { VK_F14, L"F14" },
    { VK_F15, L"F15" },
    { VK_F16, L"F16" },
    { VK_F17, L"F17" },
    { VK_F18, L"F18" },
    { VK_F19, L"F19" },
    { VK_F20, L"F20" },
    { VK_F21, L"F21" },
    { VK_F22, L"F22" },
    { VK_F23, L"F23" },
    { VK_F24, L"F24" },
    { VK_FINAL, L"FinalMode" },
    { VK_HELP, L"Help" },
    { VK_HOME, L"Home" },
    { VK_INSERT, L"Insert" },
    { VK_JUNJA, L"JunjaMode" },
    { VK_LAUNCH_APP1, L"LaunchApplication1" },
    { VK_LAUNCH_APP2, L"LaunchApplication2" },
    { VK_LAUNCH_MAIL, L"LaunchMail" },
    { VK_LAUNCH_MEDIA_SELECT, L"LaunchMediaPlayer" },
    { VK_LCONTROL, L"Control" },
    { VK_LEFT, L"ArrowLeft" },
    { VK_LMENU, L"Alt" },
    { VK_LSHIFT, L"Shift" },
    { VK_LWIN, L"OS" },
    { VK_MEDIA_NEXT_TRACK, L"MediaTrackNext" },
    { VK_MEDIA_PLAY_PAUSE, L"MediaPlayPause" },
    { VK_MEDIA_PREV_TRACK, L"MediaTrackPrevious" },
    { VK_MEDIA_STOP, L"MediaStop" },
    { VK_MENU, L"Alt" },
    { VK_MODECHANGE, L"ModeChange" },
    { VK_NEXT, L"PageDown" },
    { VK_NONCONVERT, L"NonConvert" },
    { VK_NUMLOCK, L"NumLock" },
    { VK_OEM_CLEAR, L"Clear" },
    { VK_PAUSE, L"Pause" },
    { VK_PLAY, L"Play" },
    { VK_PRIOR, L"PageUp" },
    { VK_PROCESSKEY, L"Process" },
    { VK_RCONTROL, L"Control" },
    { VK_RETURN, L"Enter" },
    { VK_RIGHT, L"ArrowRight" },
    { VK_RMENU, L"Alt" },
    { VK_RSHIFT, L"Shift" },
    { VK_RWIN, L"OS" },
    { VK_SCROLL, L"ScrollLock" },
    { VK_SELECT, L"Select" },
    { VK_SHIFT, L"Shift" },
    { VK_SLEEP, L"Standby" },
    { VK_SNAPSHOT, L"PrintScreen" },
    { VK_TAB, L"Tab" },
    { VK_UP, L"ArrowUp" },
    { VK_VOLUME_DOWN, L"AudioVolumeDown" },
    { VK_VOLUME_MUTE, L"AudioVolumeMute" },
    { VK_VOLUME_UP, L"AudioVolumeUp" },
    { VK_ZOOM, L"ZoomToggle" },
};

// TODO: think about it later
/*
const std::unordered_map<uint32_t, qwr::u8string> kAppCommandCodeToValue{
    { APPCOMMAND_BASS_DOWN, L"AudioBassBoostDown" },
    { APPCOMMAND_BASS_UP, L"AudioBassBoostUp" },
    { APPCOMMAND_BROWSER_BACKWARD, L"BrowserBack" },
    { APPCOMMAND_BROWSER_FAVORITES, L"BrowserFavorites" },
    { APPCOMMAND_BROWSER_FORWARD, L"BrowserForward" },
    { APPCOMMAND_BROWSER_HOME, L"BrowserHome" },
    { APPCOMMAND_BROWSER_REFRESH, L"BrowserRefresh" },
    { APPCOMMAND_BROWSER_SEARCH, L"BrowserSearch" },
    { APPCOMMAND_BROWSER_STOP, L"BrowserStop" },
    { APPCOMMAND_CLOSE, L"Close" },
    { APPCOMMAND_COPY, L"Copy" },
    { APPCOMMAND_CUT, L"Cut" },
    { APPCOMMAND_FIND, L"Find" },
    { APPCOMMAND_FORWARD_MAIL, L"MailForward" },
    { APPCOMMAND_HELP, L"Help" },
    { APPCOMMAND_LAUNCH_APP1, L"LaunchApplication1" },
    { APPCOMMAND_LAUNCH_APP2, L"LaunchApplication2" },
    { APPCOMMAND_LAUNCH_MAIL, L"LaunchMail" },
    { APPCOMMAND_LAUNCH_MEDIA_SELECT, L"LaunchMediaPlayer" },
    { APPCOMMAND_MEDIA_CHANNEL_DOWN, L"ChannelDown" },
    { APPCOMMAND_MEDIA_CHANNEL_UP, L"ChannelUp" },
    { APPCOMMAND_MEDIA_FAST_FORWARD, L"MediaFastForward" },
    { APPCOMMAND_MEDIA_NEXTTRACK, L"MediaTrackNext" },
    { APPCOMMAND_MEDIA_PAUSE, L"MediaPause" },
    { APPCOMMAND_MEDIA_PLAY, L"MediaPlay" },
    { APPCOMMAND_MEDIA_PLAY_PAUSE, L"MediaPlayPause" },
    { APPCOMMAND_MEDIA_PREVIOUSTRACK, L"MediaTrackPrevious" },
    { APPCOMMAND_MEDIA_RECORD, L"MediaRecord" },
    { APPCOMMAND_MEDIA_REWIND, L"MediaRewind" },
    { APPCOMMAND_MEDIA_STOP, L"MediaStop" },
    { APPCOMMAND_NEW, L"New" },
    { APPCOMMAND_OPEN, L"Open" },
    { APPCOMMAND_PASTE, L"Paste" },
    { APPCOMMAND_PRINT, L"Print" },
    { APPCOMMAND_REDO, L"Redo" },
    { APPCOMMAND_REPLY_TO_MAIL, L"MailReply" },
    { APPCOMMAND_SAVE, L"Save" },
    { APPCOMMAND_SEND_MAIL, L"MailSend" },
    { APPCOMMAND_SPELL_CHECK, L"SpellCheck" },
    { APPCOMMAND_UNDO, L"Undo" },
    { APPCOMMAND_VOLUME_DOWN, L"AudioVolumeDown" },
    { APPCOMMAND_VOLUME_MUTE, L"AudioVolumeMute" },
    { APPCOMMAND_VOLUME_UP, L"AudioVolumeUp" },
};
*/

} // namespace

namespace smp::dom
{

std::optional<std::wstring> GetDomKey( uint32_t virtualCode )
{
    return qwr::FindAsOptional( kVirtualCodeToValue, virtualCode );
}

} // namespace smp::dom
