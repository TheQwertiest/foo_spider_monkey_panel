diff a/mozjs b/mozjs
--- a/mozjs/Debug/include/mozilla/Result.h
+++ b/mozjs/Debug/include/mozilla/Result.h
@@ -604,8 +604,8 @@ class MOZ_MUST_USE_TYPE Result final {
    *     MOZ_ASSERT(res2.unwrapErr() == 5);
    */
   template <typename F>
-  constexpr auto map(F f) -> Result<std::result_of_t<F(V)>, E> {
-    using RetResult = Result<std::result_of_t<F(V)>, E>;
+  constexpr auto map(F f) -> Result<std::invoke_result_t<F,V>, E> {
+    using RetResult = Result<std::invoke_result_t<F,V>, E>;
     return MOZ_LIKELY(isOk()) ? RetResult(f(unwrap())) : RetResult(unwrapErr());
   }
 
@@ -638,7 +638,7 @@ class MOZ_MUST_USE_TYPE Result final {
    */
   template <typename F>
   constexpr auto mapErr(F f) {
-    using RetResult = Result<V, std::result_of_t<F(E)>>;
+    using RetResult = Result<V, std::invoke_result_t<F,E>>;
     return MOZ_UNLIKELY(isErr()) ? RetResult(f(unwrapErr()))
                                  : RetResult(unwrap());
   }
@@ -699,7 +699,7 @@ class MOZ_MUST_USE_TYPE Result final {
    *     MOZ_ASSERT(res2.unwrap() == 5);
    */
   template <typename F>
-  auto orElse(F f) -> Result<V, typename std::result_of_t<F(E)>::err_type> {
+  auto orElse(F f) -> Result<V, typename std::invoke_result_t<F,E>::err_type> {
     return MOZ_UNLIKELY(isErr()) ? f(unwrapErr()) : unwrap();
   }
 
--- a/mozjs/Release/include/mozilla/Result.h
+++ b/mozjs/Release/include/mozilla/Result.h
@@ -604,8 +604,8 @@ class MOZ_MUST_USE_TYPE Result final {
    *     MOZ_ASSERT(res2.unwrapErr() == 5);
    */
   template <typename F>
-  constexpr auto map(F f) -> Result<std::result_of_t<F(V)>, E> {
-    using RetResult = Result<std::result_of_t<F(V)>, E>;
+  constexpr auto map(F f) -> Result<std::invoke_result_t<F,V>, E> {
+    using RetResult = Result<std::invoke_result_t<F,V>, E>;
     return MOZ_LIKELY(isOk()) ? RetResult(f(unwrap())) : RetResult(unwrapErr());
   }
 
@@ -638,7 +638,7 @@ class MOZ_MUST_USE_TYPE Result final {
    */
   template <typename F>
   constexpr auto mapErr(F f) {
-    using RetResult = Result<V, std::result_of_t<F(E)>>;
+    using RetResult = Result<V, std::invoke_result_t<F,E>>;
     return MOZ_UNLIKELY(isErr()) ? RetResult(f(unwrapErr()))
                                  : RetResult(unwrap());
   }
@@ -699,7 +699,7 @@ class MOZ_MUST_USE_TYPE Result final {
    *     MOZ_ASSERT(res2.unwrap() == 5);
    */
   template <typename F>
-  auto orElse(F f) -> Result<V, typename std::result_of_t<F(E)>::err_type> {
+  auto orElse(F f) -> Result<V, typename std::invoke_result_t<F,E>::err_type> {
     return MOZ_UNLIKELY(isErr()) ? f(unwrapErr()) : unwrap();
   }
 
